
import com.teamdev.jxbrowser.chromium.Browser;
import com.teamdev.jxbrowser.chromium.Callback;
import com.teamdev.jxbrowser.chromium.JSObject;
import com.teamdev.jxbrowser.chromium.events.ConsoleEvent;
import com.teamdev.jxbrowser.chromium.events.ConsoleListener;
import com.teamdev.jxbrowser.chromium.events.ScriptContextAdapter;
import com.teamdev.jxbrowser.chromium.events.ScriptContextEvent;
import com.teamdev.jxbrowser.chromium.swing.BrowserView;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;


public class Map extends javax.swing.JFrame 
{

    /**
     * Creates new form NewJFrame
     */
    public Map() 
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 858, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 703, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    static ArrayList<coords> markers = new ArrayList<coords>();
    final static Browser browser = new Browser();
    
    public static void main(String[] args) 
    {
        
        JButton clrButton = new JButton("Clear All");
        clrButton.addActionListener
        (
            new ActionListener() 
            {
                public void actionPerformed(ActionEvent e) 
                {
                    browser.executeJavaScript
                    (
                        "clearmarkers();\n"
                    );
                    markers.clear();
                }
            }
        );
        
        JButton calcRouteButton = new JButton("Calculate Route");
        calcRouteButton.addActionListener
        (
            new ActionListener() 
            {
                public void actionPerformed(ActionEvent e) 
                {
                    for(coords startNode : markers)
                    {
                        browser.executeJavaScript
                        (
                            String.format("addToRoute(%s,%s)", startNode.x, startNode.y)
                        );
                    }
                    browser.executeJavaScript
                    (
                        "calcRoute()"
                    );
                    System.out.println("DONE CALC");
                }
            }
        );  
        
        JButton clrRouteButton = new JButton("Clear Route");
        clrRouteButton.addActionListener
        (
            new ActionListener() 
            {
                public void actionPerformed(ActionEvent e) 
                {
                    browser.executeJavaScript
                    (
                        "clearRoute()"
                    );
                }
            }
        );
        
        JButton undoMarkerButton = new JButton("Undo Marker");
        undoMarkerButton.addActionListener
        (
            new ActionListener() 
            {
                public void actionPerformed(ActionEvent e) 
                {
                    markers.remove(markers.size()-1);
                    browser.executeJavaScript
                    (
                        "removeLastMarker()"
                    );
                }
            }
        );
        
        JPanel buttonList = new JPanel();
        buttonList.add(undoMarkerButton);
        buttonList.add(clrButton);
        buttonList.add(clrRouteButton);
        buttonList.add(calcRouteButton);      
        
        browser.addScriptContextListener
        (
            new ScriptContextAdapter() 
            {
                @Override
                public void onScriptContextCreated(ScriptContextEvent event) 
                {
                    browser.executeJavaScriptAndReturnValue("window").asObject().setProperty("java", new JavaCallback());
                }
            }
        );
        
        BrowserView view = new BrowserView(browser);
        JFrame frame = new JFrame("Route Planner");
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        frame.add(view, BorderLayout.CENTER);
        frame.add(buttonList, BorderLayout.NORTH);
        frame.setSize(1200,700);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);

        Browser.invokeAndWaitFinishLoadingMainFrame(browser, 
            new Callback<Browser>() 
            {               
                @Override
                public void invoke(Browser value) 
                {                 
                   browser.loadURL(getClass().getResource("/maps.html").toString()); 
                }
            }
        );
        
        browser.executeJavaScriptAndReturnValue
        ( 
            "map.addListener('click', function(e) {\n" +
            "window.java.onMarkerAdded(e.latLng);\n" +
            "});\n"
        );       
        
        //https://jxbrowser.support.teamdev.com/support/solutions/articles/9000013060-console-messages
        browser.addConsoleListener(
                new ConsoleListener() 
                {
                    @Override
                    public void onMessage(ConsoleEvent event) 
                    {
                        System.out.println("Message: " + event.getMessage());
                    }
                }
        );
    }
    
    public static class JavaCallback 
    {
        //https://stackoverflow.com/questions/47058687/jxbrowser-and-google-maps-in-java-swing
        public void onMarkerAdded(JSObject position)
        {
            double lat = position.getProperty("lat").asFunction().invoke(position).asNumber().getDouble();
            double lng = position.getProperty("lng").asFunction().invoke(position).asNumber().getDouble();
            System.out.println("lat = " + lat + ", lng = " + lng);
            browser.executeJavaScript
            (
                String.format("addmarker(%s,%s)", lat, lng)
            );
            markers.add(new coords(lat,lng));
        }
    }
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
